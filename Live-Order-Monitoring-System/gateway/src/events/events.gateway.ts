/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unused-vars */
// gateway/src/events/events.gateway.ts
import { Logger } from '@nestjs/common';
import {
  OnGatewayConnection,
  OnGatewayDisconnect,
  OnGatewayInit,
  WebSocketGateway,
  WebSocketServer,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';

// @WebSocketGateway() ‡∏à‡∏∞‡πÉ‡∏ä‡πâ port ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö HTTP server (3000)
// ‡πÄ‡∏£‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° cors ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Frontend ‡∏à‡∏≤‡∏Å URL ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
@WebSocketGateway({
  cors: {
    origin: '*', // ‡πÉ‡∏ô Production ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ö‡∏∏ URL ‡∏Ç‡∏≠‡∏á Frontend ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  },
})
export class EventsGateway
  implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect
{
  private readonly logger = new Logger(EventsGateway.name);

  // @WebSocketServer() ‡∏à‡∏∞ inject instance ‡∏Ç‡∏≠‡∏á Socket.IO server ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤
  @WebSocketServer()
  server: Server;

  afterInit(server: Server) {
    this.logger.log('‚úÖ WebSocket Gateway initialized');
  }

  handleConnection(client: Socket, ...args: any[]) {
    this.logger.log(`ü§ù Client connected: ${client.id}`);
  }

  handleDisconnect(client: Socket) {
    this.logger.log(`üëã Client disconnected: ${client.id}`);
  }

  /**
   * Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
   * @param order - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å Redis
   */
  broadcastNewOrder(order: any) {
    // 'new_order' ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠ event ‡∏ó‡∏µ‡πà Frontend ‡∏à‡∏∞‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á
    this.server.emit('new_order', order);
    this.logger.log(`üì¢ Broadcasting new order #${order.id} to all clients`);
  }

  /**
   * Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
   */
  broadcastOrderStatusUpdate(update: any) {
    // 'order_status_update' ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠ event ‡∏ó‡∏µ‡πà Frontend ‡∏à‡∏∞‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á
    this.server.emit('order_status_update', update);
    this.logger.log(
      `üì¢ Broadcasting status update for order #${update.id} to ${update.status}`,
    );
  }
}
