/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/restrict-template-expressions */
// gateway/src/redis/redis.service.ts
import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import Redis from 'ioredis';
import { EventsGateway } from '../events/events.gateway'; // üëà Import EventsGateway

@Injectable()
export class RedisSubscriberService implements OnModuleInit {
  private readonly logger = new Logger(RedisSubscriberService.name);
  private subscriber: Redis;

  // üëà Inject EventsGateway ‡πÅ‡∏•‡∏∞ ConfigService ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  constructor(
    private readonly eventsGateway: EventsGateway,
    private readonly configService: ConfigService,
  ) {}

  onModuleInit() {
    this.subscriber = new Redis({
      host: this.configService.get<string>('REDIS_HOST'),
      port: this.configService.get<number>('REDIS_PORT'),
    });

    this.logger.log('üîó Connecting to Redis for subscription...');

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á Channel 'order_events'
    this.subscriber.subscribe('order_events', (err, count) => {
      if (err) {
        this.logger.error('‚ùå Failed to subscribe to Redis:', err);
        return;
      }
      this.logger.log(
        `üéß Subscribed to ${count} channel(s). Listening for messages...`,
      );
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô channel 'order_events' ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ô‡∏µ‡πâ
    this.subscriber.on('message', (channel, message) => {
      // log ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å channel ‡πÑ‡∏´‡∏ô
      this.logger.log(`üì© Received message from channel '${channel}'`);
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡πÉ‡∏´‡πâ handleOrderEvent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
      this.handleOrderEvent(message);
    });
  }

  private handleOrderEvent(message: string) {
    try {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å Redis ‡πÄ‡∏õ‡πá‡∏ô object
      const event = JSON.parse(message);

      // ‡∏ñ‡πâ‡∏≤ event ‡πÄ‡∏õ‡πá‡∏ô order_created ‡πÉ‡∏´‡πâ broadcast ‡πÑ‡∏õ‡∏¢‡∏±‡∏á frontend
      if (event.event === 'order_created') {
        this.eventsGateway.broadcastNewOrder(event.data);
      }
      // ‡∏ñ‡πâ‡∏≤ event ‡πÄ‡∏õ‡πá‡∏ô order_status_updated ‡πÉ‡∏´‡πâ broadcast ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á frontend
      else if (event.event === 'order_status_updated') {
        this.eventsGateway.broadcastOrderStatusUpdate(event.data);
      }
    } catch (error) {
      // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (JSON error) ‡πÉ‡∏´‡πâ log error
      this.logger.error('‚ùå Could not parse message from Redis', error);
    }
  }
}
