import {
  Injectable,
  NestMiddleware,
  UnauthorizedException,
  Logger,
} from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';
import axios from 'axios';

@Injectable()
export class AuthMiddleware implements NestMiddleware {
  private readonly logger = new Logger(AuthMiddleware.name);
  // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® url ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
  private readonly usersServiceUrl =
    'http://users-service:3002/api/auth/verify';

  async use(req: Request, res: Response, next: NextFunction) {
    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ token ‡∏à‡∏≤‡∏Å header
    const token = req.cookies?.access_token;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ header ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ authorization ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!token) {
      throw new UnauthorizedException(
        'Missing or invalid authorization header',
      );
    }

    try {
      // ‡∏™‡πà‡∏á Token ‡πÑ‡∏õ‡πÉ‡∏´‡πâ users-service ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      const response = await axios.get(this.usersServiceUrl, {
        headers: {
          Cookie: `access_token=${token}`, // üëà ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ Cookie ‡πÉ‡∏ô Header
        },
      });

      // ‡∏ñ‡πâ‡∏≤ users-service ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏ô‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÑ‡∏õ‡∏Å‡∏±‡∏ö request ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
      (req as any).user = response.data;

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÄ‡∏õ‡πá‡∏ô JSON string ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏Å‡∏±‡∏ö Header
      // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Gateway ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Service ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ
      // (‡πÄ‡∏ä‡πà‡∏ô orders-service) ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token ‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å
      req.headers['x-user'] = JSON.stringify(response.data);; // ‡πÅ‡∏ô‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÑ‡∏õ‡∏Å‡∏±‡∏ö Header

      this.logger.log(
        `‚úÖ User authenticated: ${JSON.stringify(response.data)}`,
      );
      next(); // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ request ‡∏ß‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    } catch (error) {
      this.logger.error('‚ùå Authentication failed', error.response?.data);
      throw new UnauthorizedException('Authentication failed');
    }
  }
}
