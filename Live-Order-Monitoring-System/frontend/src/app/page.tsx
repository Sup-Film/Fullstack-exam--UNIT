"use client";

import { useSocket } from "@/hooks/useSocket";
import api from "@/lib/api";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OrderItem
interface OrderItem {
  id: number;
  quantity: number;
  price: number;
  product: {
    id: number;
    name: string;
  };
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order ‡∏ó‡∏µ‡πà‡∏°‡∏µ OrderItem interface ‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏õ‡πá‡∏ô Array
interface Order {
  id: number;
  status: string;
  totalAmount: number;
  createdAt: string;
  orderItems: OrderItem[];
}

export default function Home() {
  const queryClient = useQueryClient();
  const socket = useSocket(
    process.env.NEXT_PUBLIC_SOCKET_URL || "ws://localhost:3000"
  );

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ React Query
  const {
    data: orders,
    isLoading,
    error,
  } = useQuery<Order[]>({
    queryKey: ["orders"], // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cache ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ
    queryFn: async () => {
      // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const { data } = await api.get("/orders/api/orders");
      console.log("Fetched orders:", data);
      return data;
    },
    refetchOnWindowFocus: false, // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£ refetch ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
  });

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Real-time Events ‡∏î‡πâ‡∏ß‡∏¢ useEffect
  useEffect(() => {
    if (!socket) return;

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á Event ‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å Socket
    const handleNewOrder = (newOrder: Order) => {
      console.log("New order received:", newOrder);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Cache ‡∏Ç‡∏≠‡∏á React Query ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      queryClient.setQueryData<Order[]>(["orders"], (oldData = []) => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Order ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Cache ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingOrder = oldData.find((order) => order.id === newOrder.id);
        if (existingOrder) {
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
          return oldData;
        }
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° Order ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        return [...oldData, newOrder];
      });
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á Event 'order_status_update'
    const handleStatusUpdate = (update: { id: number; status: string }) => {
      console.log("üîÑ Order Status Updated:", update);
      queryClient.setQueryData<Order[]>(["orders"], (oldData = []) => {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        return oldData.map((order) =>
          order.id === update.id ? { ...order, status: update.status } : order
        );
      });
    };

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á
    socket.on("new_order", handleNewOrder);
    socket.on("order_status_update", handleStatusUpdate);

    // Cleanup function: ‡∏´‡∏¢‡∏∏‡∏î‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
    return () => {
      socket.off("new_order", handleNewOrder);
      socket.off("order_status_update", handleStatusUpdate);
    };
  }, [socket, queryClient]); // useEffect ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ socket ‡∏´‡∏£‡∏∑‡∏≠ queryClient ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ

  const { mutate: updateOrderStatus, isPending } = useMutation({
    mutationFn: ({ orderId, status }: { orderId: number; status: string }) => {
      // ‡∏¢‡∏¥‡∏á API PATCH ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Gateway
      return api.patch(`/orders/api/orders/${orderId}/status`, { status });
    },
    onSuccess: () => {
      // ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      // Backend ‡∏à‡∏∞‡∏™‡πà‡∏á Event ‡∏ú‡πà‡∏≤‡∏ô WebSocket ‡∏°‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á
      console.log("Update successful, waiting for WebSocket event...");
    },
    onError: (err) => {
      console.error("Failed to update status:", err);
      alert("Failed to update order status!");
    },
  });

  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center">
        Loading...
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex h-screen items-center justify-center text-red-500">
        Error loading orders. Please try again.
      </div>
    );
  }

  return (
    <main className="min-h-screen bg-gray-50 p-8">
      <div className="mx-auto max-w-7xl">
        <div className="mb-6 flex items-center justify-between">
          <h1 className="text-3xl font-bold text-gray-900">
            Live Order Dashboard
          </h1>
          <div className="flex items-center space-x-2">
            <span
              className={`h-3 w-3 rounded-full ${
                socket?.connected ? "bg-green-500" : "bg-red-500"
              }`}></span>
            <span>{socket?.connected ? "Connected" : "Disconnected"}</span>
          </div>
        </div>

        <div className="overflow-hidden rounded-lg bg-white shadow">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                  Order ID
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                  Items
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">
                  Total
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">
                  Time
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200 bg-white">
              {orders?.map((order) => (
                <tr key={order.id} className="hover:bg-gray-50">
                  <td className="whitespace-nowrap px-6 py-4 font-medium text-gray-900">
                    #{order.id}
                  </td>
                  <td className="whitespace-nowrap px-6 py-4">
                    <span
                      className={`rounded-full px-2 py-1 text-xs font-semibold ${
                        order.status === "pending"
                          ? "bg-yellow-100 text-yellow-800"
                          : order.status === "confirmed"
                          ? "bg-blue-100 text-blue-800"
                          : "bg-green-100 text-green-800"
                      }`}>
                      {order.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-500">
                    {order.orderItems
                      .map((item) => `${item.quantity}x ${item.product.name}`)
                      .join(", ")}
                  </td>
                  <td className="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-700">
                    ${order.totalAmount.toFixed(2)}
                  </td>
                  <td className="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
                    {new Date(order.createdAt).toLocaleTimeString()}
                  </td>
                  <td className="whitespace-nowrap px-6 py-4 text-right text-sm font-medium">
                    {order.status === "pending" && (
                      <div className="flex justify-end space-x-2">
                        <button
                          onClick={() =>
                            updateOrderStatus({
                              orderId: order.id,
                              status: "confirmed",
                            })
                          }
                          disabled={isPending}
                          className="rounded-md bg-blue-600 px-3 py-1 text-white shadow-sm hover:bg-blue-700 disabled:opacity-50">
                          Confirm
                        </button>
                        <button
                          onClick={() =>
                            updateOrderStatus({
                              orderId: order.id,
                              status: "cancelled",
                            })
                          }
                          disabled={isPending}
                          className="rounded-md bg-red-600 px-3 py-1 text-white shadow-sm hover:bg-red-700 disabled:opacity-50">
                          Cancel
                        </button>
                      </div>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </main>
  );
}
