import { Injectable, Logger, OnModuleDestroy } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import Redis from 'ioredis';
import { Order } from 'src/entities/order.entity';

@Injectable()
export class RedisService implements OnModuleDestroy {
  private readonly logger = new Logger(RedisService.name);
  // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Redis ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö publisher ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  // ‡πÉ‡∏ä‡πâ ioredis ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Redis server
  private publisher: Redis;

  constructor(private configService: ConfigService) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á Redis ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î host ‡πÅ‡∏•‡∏∞ port ‡∏à‡∏≤‡∏Å config
    this.publisher = new Redis({
      host: this.configService.get<string>('REDIS_HOST', 'redis'),
      port: this.configService.get<number>('REDIS_PORT', 6379),
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£ log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    this.publisher.on('connect', () => {
      this.logger.log('Connected to Redis server');
    });
    this.publisher.on('error', (err) => {
      this.logger.error('Redis connection error', err);
    });
  }

  // ‡∏™‡πà‡∏á Event 'order_created' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Channel 'order_events'
  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà order: Order
  async publishOrderCreated(order: Order): Promise<void> {
    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ message ‡πÄ‡∏õ‡πá‡∏ô JSON string ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ event name ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order
    const message = JSON.stringify({
      event: 'order_created',
      data: order,
    });

    // ‡πÉ‡∏ä‡πâ publisher.publish ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á channel 'order_events' ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö message ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    await this.publisher.publish('order_events', message);
    this.logger.log(`Published order created event for order ID: ${order.id}`);
  }

  // ‡∏™‡πà‡∏á Event 'order_status_updated' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Channel 'order_events'
  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ order: Order
  async publishOrderStatusChanged(order: Order): Promise<void> {
    const message = JSON.stringify({
      event: 'order_status_updated',
      data: order,
    });

    await this.publisher.publish('order_events', message);
    this.logger.log(
      `Published order status updated event for order ID: ${order.id}`,
    );
  }

  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Service ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
  async onModuleDestroy() {
    await this.publisher.quit();
    this.logger.log('üëã Redis connection closed.');
  }
}
