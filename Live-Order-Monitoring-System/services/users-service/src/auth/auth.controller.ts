/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import {
  Controller,
  Post,
  Body,
  HttpException,
  HttpStatus,
  UseGuards,
  Request,
  Logger,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { CreateUserDto } from 'src/user/dto/createUser.dto';
import { LocalAuthGuard } from './guards/local-auth.guard';

@Controller('auth')
export class AuthController {
  private readonly logger = new Logger(AuthController.name);

  constructor(private readonly authService: AuthService) {}

  @UseGuards(LocalAuthGuard)
  @Post('login')
  async login(@Request() req) {
    try {
      this.logger.log(`üîê Processing login for: ${req.user.email}`);

      // req.user ‡∏°‡∏≤‡∏à‡∏≤‡∏Å LocalStrategy validation ‡πÅ‡∏•‡πâ‡∏ß
      // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ AuthService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
      const result = await this.authService.login(req.user);

      this.logger.log(`‚úÖ Login successful: ${req.user.email}`);

      return {
        success: true,
        message: '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: result,
      };
    } catch (error) {
      this.logger.error(
        `‚ùå Login processing failed: ${req.user?.email}`,
        error,
      );

      throw new HttpException(
        {
          success: false,
          message: error.message,
          error: 'LOGIN_FAILED',
        },
        HttpStatus.UNAUTHORIZED,
      );
    }
  }

  /**
   * ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ authentication
   */
  @Post('register')
  async register(@Body() createUserDto: CreateUserDto) {
    try {
      this.logger.log(`üìù Processing registration for: ${createUserDto.email}`);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AuthService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      const result = await this.authService.register(createUserDto);

      this.logger.log(`‚úÖ Registration successful: ${createUserDto.email}`);

      return {
        success: true,
        message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: result,
      };
    } catch (error) {
      this.logger.error(
        `‚ùå Registration failed: ${createUserDto.email}`,
        error,
      );

      throw new HttpException(
        {
          success: false,
          message: error.message,
          error: 'REGISTRATION_FAILED',
        },
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö external services
   * ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Guard ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏±‡∏ö token ‡∏ú‡πà‡∏≤‡∏ô request body
   */
  @Post('verify')
  async verifyToken(@Body('token') token: string) {
    try {
      this.logger.log('üîç Processing external token verification...');

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AuthService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
      const result = await this.authService.verifyToken(token);

      this.logger.log('‚úÖ External token verification successful');

      return {
        success: true,
        message: 'Token is valid',
        data: result,
      };
    } catch (error) {
      this.logger.error('‚ùå External token verification failed:', error);

      throw new HttpException(
        {
          success: false,
          message: error.message,
          error: 'TOKEN_VERIFICATION_FAILED',
        },
        HttpStatus.UNAUTHORIZED,
      );
    }
  }
}
