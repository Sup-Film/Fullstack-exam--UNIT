// src/auth/auth.service.ts
import { Injectable, Logger, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UserService } from 'src/user/user.service';
import { LoginResponseDto } from './dto/loginReponse.dto';
import { CreateUserDto } from 'src/user/dto/createUser.dto';
import { User } from 'src/user/entities/user.entity';

@Injectable()
export class AuthService {
  private readonly logger = new Logger(AuthService.name);

  constructor(
    private userService: UserService,
    private jwtService: JwtService,
  ) {}

  /**
   * Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LocalStrategy - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö credentials
   * ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢ Passport LocalStrategy ‡πÄ‡∏û‡∏∑‡πà‡∏≠ validate email ‡πÅ‡∏•‡∏∞ password
   */
  async validateUser(email: string, password: string): Promise<User | null> {
    this.logger.log(`üîê Validating credentials for: ${email}`);

    try {
      // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å email
      const user = await this.userService.findByEmail(email);
      if (!user) {
        this.logger.warn(`‚ùå User not found: ${email}`);
        return null;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      const isPasswordValid = await this.userService.validatePassword(
        password,
        user.password,
      );
      if (!isPasswordValid) {
        this.logger.warn(`‚ùå Invalid password for: ${email}`);
        return null;
      }

      this.logger.log(`‚úÖ User validation successful: ${email}`);
      return user;
    } catch (error) {
      this.logger.error(`‚ùå User validation error:`, error);
      return null;
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token ‡πÅ‡∏•‡∏∞ response - ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å authentication ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   * Method ‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ö User entity ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token ‡∏û‡∏£‡πâ‡∏≠‡∏° response ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
   */
  async login(user: User): Promise<LoginResponseDto> {
    this.logger.log(`üîë Generating JWT token for: ${user.email}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT payload ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const payload = {
      sub: user.id, // Subject - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      email: user.email, // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      name: user.name, // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      role: user.role, // ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö authorization
      iat: Math.floor(Date.now() / 1000), // Issued at timestamp
    };

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
    const access_token = this.jwtService.sign(payload);

    this.logger.log(`‚úÖ JWT token generated successfully for: ${user.email}`);

    return {
      access_token,
      user: user.toResponseObject(), // ‡πÉ‡∏ä‡πâ method ‡πÉ‡∏ô entity ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    };
  }

  /**
   * ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
   * Method ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ login ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   */
  async register(createUserDto: CreateUserDto): Promise<LoginResponseDto> {
    this.logger.log(`üìù Registering new user: ${createUserDto.email}`);

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
      const newUser = await this.userService.create(createUserDto);

      this.logger.log(`‚úÖ User registration successful: ${newUser.email}`);

      // ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      return this.login(newUser);
    } catch (error) {
      this.logger.error(
        `‚ùå User registration failed: ${createUserDto.email}`,
        error,
      );
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö external services
   * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Orders Service ‡∏´‡∏£‡∏∑‡∏≠ Gateway ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
   */
  async verifyToken(token: string) {
    this.logger.log('üîç Verifying external token...');

    try {
      // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
      const payload = this.jwtService.verify(token);

      // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      const user = await this.userService.findById(payload.sub);
      if (!user) {
        throw new UnauthorizedException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      }

      this.logger.log(
        `‚úÖ External token verification successful for: ${user.email}`,
      );

      return {
        valid: true,
        user: user.toResponseObject(),
        payload,
      };
    } catch (error) {
      this.logger.error(
        `‚ùå External token verification failed:`,
        error.message,
      );
      throw new UnauthorizedException('Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
    }
  }
}
